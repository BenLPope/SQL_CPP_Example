//Program written by Ben Pope
//Original Program by Ray Kresman
//Homework #4
//March 27th, 2012
//This program does 4 different querris and outputs the results.
//This program connects to an sqlplus database and extracts the necessary data
//
//Unfortunately option #2 does not work and returns an SQL error -918
//

#include <iomanip.h>
#include <iostream.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>

using namespace std;
// Parse=partial by default when code=cpp so, preprocessor directives are
// recognized and parsed fully.
#define     UNAME_LEN      20
#define     PWD_LEN        40

// Declare section is required when CODE=CPP and/or PARSE={PARTIAL|NONE}
exec sql begin declare section;
  VARCHAR username[UNAME_LEN];  // VARCHAR is an ORACLE supplied struct
                                // Has actual data & length
  varchar password[PWD_LEN];    // varchar can be in lower case also
  varchar sql_statement[1000];  //holds the sql stat being constructed..
  int supplierNo;

  char    inputSupplierName[50];        //entered using cin
  varchar output1[50];       //retrieved output from database
  varchar output2[50];

exec sql end declare section;

// Declare error handling function
void sql_error(char *msg);
void connectToDatabase();
void commitAndExit() ;
void buildAfixedSQL();
void buildOption1();
void buildOption2(string);
void buildOption3(string);
void buildOption4(string, string);
void prepareAndExecuteIt ();
void prepareAndExecuteIt2 ();
int mainMenu();
exec sql include sqlca;

main()
{
	bool outputFlag = false;


// Call sql_error whenever there is an error
    exec sql WHENEVER SQLERROR DO sql_error("Oracle error");


    exec sql
        WHENEVER SQLERROR
        DO sql_error("ORACLE error:");

    connectToDatabase();
     if (mainMenu() == 2) 
        outputFlag = true;
     if (outputFlag)
	    prepareAndExecuteIt2(); //outputs two fields
     if (!outputFlag)
	    prepareAndExecuteIt(); //outputs one field

    commitAndExit();

}

int mainMenu() {
        string choice;     // Hold Choice of querry to run
        string x1;     // Cointainer for Q. #2
        string x2;     // Container for Q. #3
	string x3;     // Container for Q. #4
        string x4;     // Container for Q. #4 second variable
	

        cout << "*****************************************************************************" << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "1)    Find the names of aircraft such that all pilots certified to" << endl;
        cout << "      operate them have salaries over $80,000. " << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "2)    For each pilot who is certified for more than X1 aircrafts," << endl;
        cout << "      find the eid and the maximum cruisingrange of the aircraft" << endl;
        cout << "      for which she or he is certified. (Broken) " << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "3)    For all aircraft with cruisingrange over X2 miles, find the name " << endl;
        cout << "      of the aircraft and the average salary of all pilots certified " << endl;
        cout << "      for this aircraft." << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "4)    Find the aids of all aircraft that can be used on routes from X3 to X4." << endl;
        cout << "-----------------------------------------------------------------------------" << endl;
        cout << "*****************************************************************************" << endl;
        cout << "Database Querry, Please select querry to run:" << endl;
        cout << "Select 1-4 or type 5 to quit: ";
	getline(cin,choice);
	
	if (choice == "5")
		commitAndExit();
	else if (choice == "1")
		buildOption1();
	else if (choice == "2"){
		cout << "How many aircraft?: " ;
		cin >> x1;
		buildOption2(x1);
		return(2);}
	else if (choice == "3"){
		cout << endl << "Please select cruising range: ";
		cin >> x2;
		cout << endl;
		buildOption3(x2);
		return(2);}
	else if (choice == "4"){		
		cout << "Please type in city A: ";
		getline(cin, x3);
                cout << endl << "Please type in city B: ";
		getline(cin, x4);
		buildOption4(x3,x4);}
	else {
		cout << endl << "Error: Invalid Selection" << endl;
		commitAndExit();}
		
			
return (0);
}

void connectToDatabase() {

/*  Fixed username and password  */
    strcpy((char *)username.arr,"sp201255");
    strcpy((char *)password.arr,"Bp99825!");
    username.len = strlen((char *) username.arr);
    password.len = strlen((char *) password.arr);

//  CONNECTS TO DATABASE
    exec sql CONNECT :username IDENTIFIED BY :password;
    cout << "\nConnected to ORACLE as user: "
                << (char *)username.arr << endl << endl;

}


void commitAndExit() {

    exec sql commit work release;
    exit(0);
}
void sql_error(char *msg)
{
    exec sql WHENEVER SQLERROR CONTINUE;
    cout << endl << msg << endl;
    cout << sqlca.sqlerrm.sqlerrmc << endl;
    exec sql rollback release;
    exit(1);
}

void buildOption1() { 
         strcpy((char *)sql_statement.arr,"select aname from aircraft where aid in ");
         strcat((char *)sql_statement.arr,"(select certified.aid from employees, certified ");
         strcat((char *)sql_statement.arr,"where certified.eid = employees.eid and employees.salary > 80000)");

}
void buildOption2(string x1) {
          strcpy((char *)sql_statement.arr,"select eid, cruisingrange from aircraft, certified where ");
	  strcat((char *)sql_statement.arr,"aircraft.aid = certified.aid and certified.eid in ");
	  strcat((char *)sql_statement.arr,"(select eid from certified group by eid ");
	  strcat((char *)sql_statement.arr,"having(count(eid) > ");
	  strcat((char *)sql_statement.arr,x1.c_str());
	  strcat((char *)sql_statement.arr,")) order by eid;");
          cout << "Query is  " << (char *) sql_statement.arr << endl;

}

void buildOption3(string x2) {
	 strcpy((char *)sql_statement.arr,"select aname,(select cast(avg(employees.salary) ");
         strcat((char *)sql_statement.arr,"as decimal (25,2)) from employees,certified ");
         strcat((char *)sql_statement.arr,"where certified.eid=employees.eid and certified.aid=aircraft.aid) as average ");
         strcat((char *)sql_statement.arr,"from aircraft where cruisingrange > ");
         strcat((char *)sql_statement.arr,x2.c_str());

}
void buildOption4(string x3, string x4) {
         
         strcpy((char *)sql_statement.arr,"select aid ");
	 strcat((char *)sql_statement.arr,"from aircraft, flights ");
         strcat((char *)sql_statement.arr,"where aircraft.cruisingrange > flights.distance ");
         strcat((char *)sql_statement.arr,"and f_from = '");
         strcat((char *)sql_statement.arr,x3.c_str());
         strcat((char *)sql_statement.arr,"' and f_to = '");
         strcat((char *)sql_statement.arr,x4.c_str());
         strcat((char *)sql_statement.arr,"'");

}
void  prepareAndExecuteIt() {

//  Prepare the query; define a cursor, execute it...

    sql_statement.len = strlen((char *) sql_statement.arr);
    exec sql PREPARE S1 FROM :sql_statement;

/* The declare statement associates a cursor with a
 * PREPAREd statement.  The cursor name, like the statement
 * name, does not appear in the Declare Section.
 * A single cursor name can not be declared more than once.

*/

    exec sql declare C1 cursor FOR S1;


    exec sql open C1;
     cout << "*****************************************************************************" << endl;
     cout << "Results from Querry" << endl;
     cout << "*****************************************************************************" << endl;

while(sqlca.sqlcode == 0){

    exec sql FETCH C1 INTO :output1;

     if ( sqlca.sqlcode !=  0) { // If no rows left
	cout << "*****************************************************************************" << endl;
        cout << "End of Table" <<endl;
	cout << "*****************************************************************************" << endl;
        exec sql rollback release;
        exit(1);
       }

     cout << (char *)output1.arr << endl;
 
    }
     exec sql close C1;
}

void  prepareAndExecuteIt2() {

//  Prepare the query; define a cursor, execute it...

    sql_statement.len = strlen((char *) sql_statement.arr);
    exec sql PREPARE S1 FROM :sql_statement;

/* The declare statement associates a cursor with a
 * PREPAREd statement.  The cursor name, like the statement
 * name, does not appear in the Declare Section.
 * A single cursor name can not be declared more than once.

*/

    exec sql declare C1 cursor FOR S1;


    exec sql open C1;
     cout << "*****************************************************************************" << endl;
     cout << "Results from Querry" << endl;
     cout << "*****************************************************************************" << endl;

while(sqlca.sqlcode == 0){

    exec sql FETCH C1 INTO :output1, :output2;

     if ( sqlca.sqlcode !=  0) {//If no rows left
	cout << "*****************************************************************************" << endl;
        cout << "End of Table" <<endl;
	cout << "*****************************************************************************" << endl;
       exec sql rollback release;
        exit(1);
       }
    
     cout << (char *)output1.arr << "||\t$" << (char *)output2.arr << endl;

    }
     exec sql close C1;
}

    
